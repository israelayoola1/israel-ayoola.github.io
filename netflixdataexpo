# %% [code]
---
title: "EXPLORATORY NETFLIX DATA ANALYSIS WITH PLOTLY IN R"
author: "ISRAEL AYOOLA"
date: "22/11/2022"
output:html_document: default
  'html_document:': default
  rmarkdown::html_document:
    theme: cosmo
    toc: true
    code_folding: hide
    df_print: paged
---

```{r setup, include=FALSE, message=FALSE}
knitr::opts_chunk$set(echo = TRUE, warning=FALSE, message=FALSE, error=FALSE)
library(plotly)
library(dplyr)
library(tidyr)
library(lubridate)
```



## Overview

The following comprises an exploratory data analysis of the NETFLIX data set, which can be seen here - C:/Users/Latitude E5440/Desktop/netflix_titles.xlsx . This dataset consists of Tv shows and Movies available on NETFLIX as of the year 2019. The dataset was compiled from Flixable which is a third-party NETFLIX search engine. This record aims to provide insights into the dataset through visualizations made with the Plotly package for R.


### Exploratory data analysis

## Data reading
Let us start be loading the dataset and printing out first six rows. 

```{r}
library(readr)
netflix_titles <- read_csv("C:/Users/Latitude E5440/Downloads/netflix_titles.csv", na.strings = c("NA", ""), stringsAsFactors=F)
head(titles)
```



In the dataset there are 6234 observations of 12 following variables describing the TV Shows and Movies:

* show_id - Unique ID for every Movie / Tv Show
* type - Identifier - A Movie or TV Show
* title - Title of the Movie / Tv Show
* director - Director of the Movie
* cast - Actors involved in the movie / show
* country - Country where the movie / show was produced
* date_added - Date it was added on Netflix
* release_year - Actual Release year of the move / show
* rating - TV Rating of the movie / show
* duration - Total Duration - in minutes or number of seasons
* listed_in - Genre
* description - The summary description

### Data cleaning
As a first step, we can remove uninformative variables from the dataset. In our case, it is a show_id variable. The descriptive variable will not be used for the exploratory data analysis. We can find similar movies and tv shows using the text similarities in further exploration, which is out of scope for this time.

```{r}
#drop show_id column
netflix_titles = subset(netflix_titles, select = -c(show_id) )
```
We need to check if we have missing values in the dataset.
```{r}
#print number of missing values for each variable
data.frame("variable"=c(colnames(netflix_titles)), "missing values count"=sapply(netflix_titles, function(x) sum(is.na(x))), row.names=NULL)
```
From the above result, we see that we have missing values for variables such as director, cast, country, data_added and rating. Since rating is the categorical variable with 14 levels we can fill in (approximate) the missing values for rating with a mode.
```{r}
#function to find a mode
getmode <- function(v) {
   uniqv <- unique(v)
   uniqv[which.max(tabulate(match(v, uniqv)))]
}
netflix_titles$rating[is.na(netflix_titles$rating)] <- getmode(netflix_titles$rating)
```

We can change the date format of the data_added varible for further easy manipulations.
```{r}
netflix_titles$date_added <- as.Date(netflix_titles$date_added, format = "%B %d, %Y")
```

The missing values for the variables director, cast and country, date_added can not be easily approximated, so for now we are going to continue without filling them. We are going to drop the missing values, at point where it will be necessary. We also drop duplicated rows in the dataset based on the title, country, type, release_year variables.

```{r}
#drop duplicated rows based on the title, country, type and release_year
netflix_titles=distinct(netflix_titles,title,country,type,release_year, .keep_all= TRUE)
```

We have done the data cleaning procedures and we can continue with exploring the data.

### Data Visualisation


```{r}
count_of_type <- netflix_titles %>% group_by(type) %>% summarise(
  count = n()
)

fig1 <- plot_ly(count_of_type, labels = ~type, values = ~count, type = 'pie', marker = list(colors = c("#bd3939", "#399ba3")))
fig1 <- fig1 %>% layout(title = 'Countries And Their Movie Type Count',
         xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
         yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))

fig1
```

From the above result, there are more than 2 times more Movies than TV Shows on NETFLIX.

Since Movies and TV Shows are made by several countries (country variable). We correctly count the total Movie Type produced by each country. We need to split strings in country variable and count the total occurence of each country on its own.
```{r}
s <- strsplit(netflix_titles$country, split = ", ")
titles_countries_fuul <- data.frame(type = rep(netflix_titles$type, sapply(s, length)), country = unlist(s))
titles_countries_fuul$country <- as.character(gsub(",","",titles_countries_fuul$country))

amount_by_country <- na.omit(titles_countries_fuul) %>%
  group_by(country, type) %>%
  summarise(count = n())
w <- reshape(data=data.frame(amount_by_country),idvar="country",
                          v.names = "count",
                          timevar = "type",
                          direction="wide") %>% arrange(desc(count.Movie)) %>%
                          top_n(10)
names(w)[2] <- "count_movie"
names(w)[3] <- "count_tv_show"
w <- w[order(desc(w$count_movie+w$count_tv_show)),] 

fig <- plot_ly(w, x = w$country, y = ~count_movie, type = 'bar', name = 'Movie', marker = list(color = '#3969a3'))
fig <- fig %>% add_trace(y = ~count_tv_show, name = 'TV Show',marker = list(color = '#e61515'))
fig <- fig %>% layout(xaxis=list(categoryorder = "array", categoryarray = w$country, title="Country"), yaxis = list(title = 'Count Of Type'), barmode = 'stack', title = 'Top 10 Countries And Their Movie Type Count')

fig
```

From the above result, we see that the United States is a clear leader in the number of Movie Types on NETFLIX. Countries such as Japan, South Korea, and Taiwan have more TV Shows than Movies on NETFLIX. 

```{r}
df_by_date_full <- netflix_titles %>% group_by(date_added) %>% summarise(added_today = n()) %>% 
  mutate(total_count_of_type = cumsum(added_today), type = "Total")

df_by_date <- netflix_titles %>% group_by(date_added,type) %>% summarise(added_today = n()) %>% 
            ungroup() %>% group_by(type) %>% mutate(total_count_of_type = cumsum(added_today))

full_data<- rbind(as.data.frame(df_by_date_full), as.data.frame(df_by_date))

fig4 <- plot_ly(full_data, x = ~date_added, y = ~total_count_of_type, color = ~type, type = 'scatter', mode = 'lines', colors=c("#3969a3",  "#3e8249", "#cc1f1f")) 
fig4 <- fig4 %>% layout(yaxis = list(title = 'Count'), xaxis = list(title = 'Date'), title="Movie Growth Over 2 Decades")




fig4

```

From above result, we see that from the year 2016 the total amount of content was growing drastically. We also notice how fast the amount of movies on Netflix overcame the amount of TV Shows.

```{r}
df_by_date_full_2 <- netflix_titles %>% group_by(month_added=floor_date(date_added, "month"), type) %>%  summarise(added_today = n())
wd <- reshape(data=data.frame(df_by_date_full_2),idvar="month_added",
                          v.names = "added_today",
                          timevar = "type",
                          direction="wide")

names(wd)[2] <- "added_today_movie"
names(wd)[3] <- "added_today_tv_show"
wd$added_today_movie[is.na(wd$added_today_movie)] <- 0
wd$added_today_tv_show[is.na(wd$added_today_tv_show)] <- 0
wd <-na.omit(wd)


fig <- plot_ly(wd, x = wd$month_added, y = ~added_today_movie, type = 'bar', name = 'Movie', marker = list(color = '#3969a3'))
fig <- fig %>% add_trace(y = ~added_today_tv_show, name = 'TV Show', marker = list(color = '#cc1f1f'))
fig <- fig %>% layout(xaxis=list(categoryorder = "array", categoryarray = wd$month_added, title="Date"), yaxis = list(title = 'Count'), barmode = 'stack', title="Yearly/Monthly Movie Type Count")

fig

```

From the above result, we see that November 2019 was a peak month for NETFLIX for the amount of content added.

Let us have a look at a distribution of content by TV ratings.

```{r}
df_by_rating_only_full <- netflix_titles %>% group_by(rating) %>% summarise(count = n())
fig6 <- plot_ly(df_by_rating_only_full, labels = ~rating, values = ~count, type = 'pie')
fig6 <- fig6 %>% layout(title = 'Rating Count For All Movies In NETFLIX',
         xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
         yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))

fig6
```



```{r}
df_by_rating_full <-netflix_titles %>% group_by(rating, type) %>% summarise(count = n())
w2 <- reshape(data=data.frame(df_by_rating_full),idvar="rating",
                          v.names = "count",
                          timevar = "type",
                          direction="wide") %>% arrange(desc(count.Movie)) %>%
                          top_n(10)
names(w2)[2] <- "count_movie"
names(w2)[3] <- "count_tv_show"
w2 <- w2[order(desc(w2$count_movie+w2$count_tv_show)),] 


fig5 <- plot_ly(w2, x = w2$rating, y = ~count_movie, type = 'bar', name = 'Movie', marker = list(color = '#3969a3'))
fig5 <- fig5 %>% add_trace(y = ~count_tv_show, name = 'TV Show', marker = list(color = '#cc1f1f') )
fig5 <- fig5 %>% layout(xaxis=list(categoryorder = "array", categoryarray = w2$rating, title="Rating"), yaxis = list(title = 'Count'), barmode = 'stack', title="Rating Count For Movie Type (Movie vs. TV Show)")

fig5
```



```{r}
s3 <- strsplit(netflix_titles$listed_in, split = ", ")
titles_listed_in <- data.frame(type = rep(netflix_titles$type, sapply(s3, length)), listed_in = unlist(s3))
titles_listed_in$listed_in <- as.character(gsub(",","",titles_listed_in$listed_in))

df_by_listed_in_full <- titles_listed_in %>% group_by(listed_in) %>% summarise(count = n()) %>%
  arrange(desc(count)) %>% top_n(25)

fig7 <- plot_ly(df_by_listed_in_full, x = ~listed_in, y = ~count, type = 'scatter', marker = list(color = '#3969a3'))
fig7 <- fig7 %>% layout(xaxis=list(categoryorder = "array", categoryarray = df_by_listed_in_full$listed_in, title="Genre"), yaxis = list(title = 'Count'), title="Top 25 Movies Genres On Netflix")

fig7


```


```{r, message=FALSE}

country_movies_duration<-na.omit(netflix_titles[netflix_titles$type=="Movie",][,c("country", "duration")])
s4 <- strsplit(country_movies_duration$country, split = ", ")
country_movies_duration_full <- data.frame(duration = rep(country_movies_duration$duration, sapply(s4, length)), country = unlist(s4))
country_movies_duration_full$duration <- as.numeric(gsub(" min","", country_movies_duration_full$duration))

country_movies_duration_full_subset<-country_movies_duration_full[country_movies_duration_full$country %in% c("United States", "India", "United Kingdom", "Canada", "France", "Japan", "Spain", "South Korea", "Mexico", "Australia"),]


fig8 <- plot_ly(country_movies_duration_full_subset, y = ~duration, color = ~country, type = "box")
fig8 <- fig8 %>% layout(xaxis=list(title="Country"), yaxis = list(title = 'Duration (in min)'), 
        title="India Has The Highest Movie Duration In Top 10 Countries")

fig8


```

From the above result, Movies produced in India tends to be the longest on average, with an average duration of 127 min.

Top 10 directors by the amount of content on NETFLIX:

```{r}
s5 <- strsplit(titles$director, split = ", ")
titles_director <- data.frame(type = rep(titles$type, sapply(s5, length)), director = unlist(s5))
titles_director$director <- as.character(gsub(",","",titles_director$director))
titles_director<-na.omit(titles_director) %>%  group_by(director)  %>% summarise(count = n()) %>% arrange(desc(count)) %>% top_n(10)
titles_director<-as.data.frame(titles_director)
titles_director



There are still numerous ways we can still explore and tell a story with this data(NETFLIX DATASET). These are a few analytic examples using the Plotly package in R. 

